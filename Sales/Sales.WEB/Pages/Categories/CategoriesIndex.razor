@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3 >Categorías</h3>
<a class="btn btn-primary mb-3" href="/categories/create">Nueva Categoría</a>


<GenericList MyList="categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Categorías</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteAsync(category.Id))">Borrar</button>
                        </td>                        
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Category>? categories { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Loadasync();
    }

    private async Task Loadasync()
    {
        var responseHttp = await repository.GetAllAsync<List<Category>>("/api/categories");
        categories = responseHttp.Response;        
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm) { return; }

        var responseHttp = await repository.DeleteAsync($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                await sweetAlertService.FireAsync("Error", await responseHttp.GetErrorMessageAsync(), SweetAlertIcon.Error);
                return;
            }
        }
        await Loadasync();
    }
}
