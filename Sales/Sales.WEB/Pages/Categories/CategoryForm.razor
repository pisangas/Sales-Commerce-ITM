@inject SweetAlertService sweetAlertService
<NavigationLock OnBeforeInternalNavigation="onBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Categoría:</label>
        <div>
            <InputText class="form-control" @bind-Value="category.Name" />
            <ValidationMessage For="@(() => category.Name)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Categoria</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;
    public bool FormPostedSuccessfully { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public Category category { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(category);
    }

    private async Task onBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully) { return; }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm) { return; }

        context.PreventNavigation();
    }
}
